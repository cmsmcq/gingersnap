Test development plan

2021-01-04

The test development tools have grown to the point where they seem to need regression tests.  At least, they have grown to the point where I am sometimes worried that I'll break something.  Email to Syd Bauman and (separately) Liam Quin this morning describes the problem as I see it.

Kent Beck has the following observations that seem relevant; he is talking about the adoption of extreme programming with an existing codebase.

       Testing is perhaps the most frustrating area when you are
       shifting existing code to XP. The code written before you have
       tests is scary. You never know quite where you stand. Will this
       change be safe? You're not sure.

       As soon as you start writing the tests, the picture changes. You
       have confidence in the new code. You don't mind making changes.
       ...

       Shifting between old code and new code is like night and day.
       You will find yourself avoiding the old code. You have to resist
       this tendency. The only way to gain control in this situation is
       to bring all the code forward. Otherwise ugly things will grow
       in the dark. You will have risks of unknown magnitude.

       In this situation, it is tempting to try to just go back and
       write the tests for all the existing code. Don't do this.
       Instead, write the tests on demand.

           - When you need to add functionality to untested code, write
             tests for its current functionality first.

           - When you need to fix a bug, write a test first.

           - When you need to refactor, write tests first.

       What you will find is that development feels slow at first. You
       will spend much more time writing tests than you do in normal XP, and
       you will feel like you make progress on new functionality more slowly
       than before. ...

I am going to try to lower the threshold cost by not taking the advice to "test for [a module's] current functionality first".  Instead, I propose a multi-stage process, so as to amortize the cost.

* When developing new code, use test-first development.

* If new functionality is being added, or a bug fixed, in existing code, write tests for the new functionality and the bug condition.  What else you do depends on the current state of its tests.

1 On first visit to a module, when there is no test, make one test that exercises the crucial functionality of the module.  It need not be exhaustive, but it should be a little more informative than "the stylesheet compiles and runs without error when none of the conditions on its templates are satisfied".  

2 On second visit, when there is one test, make two or three more tests that illustrate the major conditional branches of the module.  A do-nothing input may be useful here.

3 On third visit, when there are already tests as described above, carefully describe the pre- and post-conditions of the module.  Write Schematron schemas for output (and optionally input); write in-module functions to test input for pre-conditions.  Use those tests.

4 On fourth visit, optionally write more tests to check the logic in more detail.

................

2021-01-05

For now, put XSpec test plans into ./tests directory, 
