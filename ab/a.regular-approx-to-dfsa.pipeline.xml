<grammar-pipeline>
  <desc>
    <p>Generic pipeline for converting a regular approximation
    (whether an r_k subset or an R_k superset) to a
    deterministic FSA from which test cases can be generated.</p>
    <p>At least, it's mostly generic.</p>
    <p>The make-rtn/@fissile attribute is grammar-specific.</p>
    <p>The expand-references/@nonterminals attribute is currently
    grammar-specific. If we add a way to tell make-rtn not to add
    linkage rules, this could be dispensed with.</p>
  </desc>
  <desc>
    <p>Revisions:</p>
    <p>2021-01-12 : CMSMcQ : revise for a.ixml u5 and O2
    approximations.</p>
    <p>2020-12-31 : CMSMcQ : made file (but apparently did not
    get it to a working state)</p>
  </desc>

  <eliminate-unit-rules>
    <desc>
      <p>The FSAs I'm working with have epsilon transitions,
      which of course take the form of unit rules.
      We need to lose them before determinizing.
      </p>
    </desc>
  </eliminate-unit-rules>


  <annotate-pc>
    <desc>
      <p>Epsilon elimination does make some states unreachable,
      so let's clear them out.  First re-annotate.</p>
    </desc>
  </annotate-pc>
  <remove-unreachables>
    <desc>
      <p>Then do the deed.</p>
    </desc>
  </remove-unreachables>
  
  <simplify-epsilon-expressions save="temp.ndfsa.xml">
    <desc><p>Not always needed, but not harmful.</p></desc>
  </simplify-epsilon-expressions>

  <determinize>
    <desc>
      <p>Now make the FSA deterministic.</p>
    </desc>
  </determinize>
  
  <!--
  
  <simplify-epsilon-expressions/>

  
  <fsa-to-tclego save="temp.r0.tclego.xml"/>
  
  <tclego-to-tcrecipes coverage="state-final"
		       polarity="positive"/>  
  -->
</grammar-pipeline>

  
