<?xml version="1.0" encoding="UTF-8"?>
<test-set xmlns:gt="http://blackmesatech.com/2020/grammartools"
          gt:date="2021-01-13T07:48:43.621532-07:00">
   <desc>
      <p>This document contains tests for the language defined
      by [what grammar?], generated by an as yet nameless set
      of test-case generation tools.</p>
      <p>Test polarity:  positive.</p>
      <p>Test selection:  state state-final arc arc-final.</p>
   </desc>
   <testcase gt:rulename="state-final-m-S_1"
             gt:polarity="positive"
             gt:trace="S_0 . 1 / m-S_1">
      <input-string>a</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S_2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 + m-S_2 . 1 / m-S·S·_1 . 1 / m-S_4">
      <input-string>(a)</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S_2˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 + m-S_2˃1 + m-S·S·_1 . 1 / m-S_4">
      <input-string>(a)</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S_2˃2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 + m-S_2˃2 + m-S·S·_2 . 1 / m-S·S·S·_1 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·_1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 1 / m-S·S·_1 + m-S·S·_1 . 1 / m-S_4">
      <input-string>(a)</input-string>
   </testcase>
   <testcase gt:rulename="arc-final-m-S·S·_1˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 1 / m-S·S·_1 + m-S·S·_1˃1">
      <input-string>(a)</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·_2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2 . 1 / m-S·S·S·_1 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·_2˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃1 + m-S·S·S·_1 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·_2˃2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 + m-S·S·_2˃2 + m-S·S·S·_2 . 1 / m-S·S·S·S·_1 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="state-final-m-S_4"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 1 / m-S·S·_1 . 1 / m-S_4">
      <input-string>(a)</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·_1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 + m-S·S·S·_1 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·_1˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 + m-S·S·S·_1˃1 + m-S·S·_4 . 1 / m-S_4">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·_2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2 . 1 / m-S·S·S·S·_1 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·_2˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃1 + m-S·S·S·S·_1 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·_2˃2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 + m-S·S·S·_2˃2 + m-S·S·S·S·_2 . 1 / m-S·S·S·S·S·_1 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·_4"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 . 1 / m-S·S·_4 + m-S·S·_4 . 1 / m-S_4">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="arc-final-m-S·S·_4˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 1 / m-S·S·S·_1 . 1 / m-S·S·_4 + m-S·S·_4˃1">
      <input-string>((a))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·_1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-S·S·S·S·_1 + m-S·S·S·S·_1 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·_1˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-S·S·S·S·_1 + m-S·S·S·S·_1˃1 + m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·_2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 + m-S·S·S·S·_2 . 1 / m-S·S·S·S·S·_1 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·_2˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 + m-S·S·S·S·_2˃1 + m-S·S·S·S·S·_1 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·_2˃2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 + m-S·S·S·S·_2˃2 + m-S·S·S·S·S·_2 . 1 / m-S·S·S·S·S·S·_1 . 1 / m-S·S·S·S·S·_4 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·_4"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-S·S·S·S·_1 . 1 / m-S·S·S·_4 + m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·_4˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 1 / m-S·S·S·S·_1 . 1 / m-S·S·S·_4 + m-S·S·S·_4˃1 + m-S·S·_4 . 1 / m-S_4">
      <input-string>(((a)))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·S·_1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 1 / m-S·S·S·S·S·_1 + m-S·S·S·S·S·_1 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·S·_1˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 1 / m-S·S·S·S·S·_1 + m-S·S·S·S·S·_1˃1 + m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·S·_2"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 2 / m-S·S·S·S·S·_2 + m-S·S·S·S·S·_2 . 1 / m-S·S·S·S·S·S·_1 . 1 / m-S·S·S·S·S·_4 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·S·_2˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 2 / m-S·S·S·S·S·_2 + m-S·S·S·S·S·_2˃1 + m-S·S·S·S·S·S·_1 . 1 / m-S·S·S·S·S·_4 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·_4"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 1 / m-S·S·S·S·S·_1 . 1 / m-S·S·S·S·_4 + m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·_4˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 1 / m-S·S·S·S·S·_1 . 1 / m-S·S·S·S·_4 + m-S·S·S·S·_4˃1 + m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>((((a))))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·S·S·_1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 2 / m-S·S·S·S·S·_2 . 1 / m-S·S·S·S·S·S·_1 + m-S·S·S·S·S·S·_1 . 1 / m-S·S·S·S·S·_4 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·S·S·_1˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 2 / m-S·S·S·S·S·_2 . 1 / m-S·S·S·S·S·S·_1 + m-S·S·S·S·S·S·_1˃1 + m-S·S·S·S·S·_4 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
   <testcase gt:rulename="state-pos-m-S·S·S·S·S·_4"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 2 / m-S·S·S·S·S·_2 . 1 / m-S·S·S·S·S·S·_1 . 1 / m-S·S·S·S·S·_4 + m-S·S·S·S·S·_4 . 1 / m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
   <testcase gt:rulename="arc-pos-m-S·S·S·S·S·_4˃1"
             gt:polarity="positive"
             gt:trace="S_0 . 2 / m-S_2 . 2 / m-S·S·_2 . 2 / m-S·S·S·_2 . 2 / m-S·S·S·S·_2 . 2 / m-S·S·S·S·S·_2 . 1 / m-S·S·S·S·S·S·_1 . 1 / m-S·S·S·S·S·_4 + m-S·S·S·S·S·_4˃1 + m-S·S·S·S·_4 . 1 / m-S·S·S·_4 . 1 / m-S·S·_4 . 1 / m-S_4">
      <input-string>(((((a)))))</input-string>
   </testcase>
</test-set>
