<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<ixml xmlns:gt="http://blackmesatech.com/2020/grammartools"
      xmlns:gl="http://blackmesatech.com/2019/iXML/Gluschkov"
      xmlns:follow="http://blackmesatech.com/2016/nss/ixml-gluschkov-automata-followset"
      xmlns:rtn="http://blackmesatech.com/2020/iXML/recursive-transition-networks"
      gt:date="2021-01-12T21:22:41.786249-07:00"
      gl:gluschkov="dummy value"
      follow:followsets="dummy value"
      rtn:rtn="Recursive transition network">
   <comment> 2021-01-12T21:22:41.786249-07:00 creation of stack-augmented pseudo-regular grammar (SAPRG) by ixml-to-saprg.xsl. </comment>
   <comment> Input grammar G: file:/Users/cmsmcq/2021/gingersnap/src/grammar-pipeline-handler.xsl </comment>
   <comment> Output grammar G′:  this grammar.</comment>
   <comment> A stack automaton guided by grammar G′and the rtn:stack attributes should recognize L(G), the same language recognized by G.  If the rtn:stack attributes are ignored, this is a (pseudo-)regular grammar which recognizes the R_0 superset of L(G). </comment>
   <comment>2021-01-12T21:22:41.786249-07:00: ixml-annotate-gluschkov.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.u5.clean.ixml.xml</comment>
   <comment>    Grammar augmented with Gluschkov automata (@gl:*).</comment>
   <comment>2021-01-12T21:22:41.786249-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.u5.clean.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment>2021-01-12T20:25:32.711838-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.u5.raw.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment>2021-01-12T20:25:32.711838-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.u5.raw.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment>2021-01-12T20:25:25.092556-07:00: ixml-to-rk-subset.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.ixml.xml</comment>
   <comment>    This grammar accepts the r_5 subset </comment>
   <comment>    of the language accepted by the input grammar.</comment>
   <comment> First, nonrecursive production rules </comment>
   <comment>2021-01-12T20:25:25.092556-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment> A really simple context-free grammar for testing
  test-generation tools.

  Revisions:
  2020-12-30 : CMSMcQ : made file
</comment>
   <comment> Second, recursive production rules </comment>
   <comment> bye </comment>
   <comment> Expansion for S. </comment>
   <comment> S: 'a'; '(', S·S·, ')'. </comment>
   <rule name="S_0">
      <alt rtn:ruletype="terminal">
         <literal sstring="a"/>
         <nonterminal rtn:nttype="state" name="S_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal sstring="("/>
         <nonterminal rtn:nttype="state" name="S_2"/>
      </alt>
   </rule>
   <rule name="S_1" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S_f"/>
      </alt>
   </rule>
   <rule name="S_2" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call" name="S·S·_0" rtn:stack="push S_3"/>
      </alt>
   </rule>
   <rule name="S_3" rtn:nttype="state">
      <alt rtn:ruletype="terminal">
         <literal sstring=")"/>
         <nonterminal rtn:nttype="state" name="S_4"/>
      </alt>
   </rule>
   <rule name="S_4" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S_f"/>
      </alt>
   </rule>
   <rule name="S_f">
      <alt rtn:RHStype="grammar-final" rtn:stack="if-stack-empty">
         <comment>nil</comment>
      </alt>
   </rule>
   <comment> End of expansion for S. </comment>
   <comment> Expansion for S·S·. </comment>
   <comment> S·S·: 'a'; '(', S·S·S·, ')'. </comment>
   <rule name="S·S·_0">
      <alt rtn:ruletype="terminal">
         <literal sstring="a"/>
         <nonterminal rtn:nttype="state" name="S·S·_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal sstring="("/>
         <nonterminal rtn:nttype="state" name="S·S·_2"/>
      </alt>
   </rule>
   <rule name="S·S·_1" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·_2" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call" name="S·S·S·_0" rtn:stack="push S·S·_3"/>
      </alt>
   </rule>
   <rule name="S·S·_3" rtn:nttype="state">
      <alt rtn:ruletype="terminal">
         <literal sstring=")"/>
         <nonterminal rtn:nttype="state" name="S·S·_4"/>
      </alt>
   </rule>
   <rule name="S·S·_4" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·_f">
      <alt rtn:ruletype="return">
         <comment>nil</comment>
         <nonterminal name="S_3" rtn:stack="pop S_3"/>
      </alt>
   </rule>
   <comment> End of expansion for S·S·. </comment>
   <comment> Expansion for S·S·S·. </comment>
   <comment> S·S·S·: 'a'; '(', S·S·S·S·, ')'. </comment>
   <rule name="S·S·S·_0">
      <alt rtn:ruletype="terminal">
         <literal sstring="a"/>
         <nonterminal rtn:nttype="state" name="S·S·S·_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal sstring="("/>
         <nonterminal rtn:nttype="state" name="S·S·S·_2"/>
      </alt>
   </rule>
   <rule name="S·S·S·_1" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·_2" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call" name="S·S·S·S·_0" rtn:stack="push S·S·S·_3"/>
      </alt>
   </rule>
   <rule name="S·S·S·_3" rtn:nttype="state">
      <alt rtn:ruletype="terminal">
         <literal sstring=")"/>
         <nonterminal rtn:nttype="state" name="S·S·S·_4"/>
      </alt>
   </rule>
   <rule name="S·S·S·_4" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·_f">
      <alt rtn:ruletype="return">
         <comment>nil</comment>
         <nonterminal name="S·S·_3" rtn:stack="pop S·S·_3"/>
      </alt>
   </rule>
   <comment> End of expansion for S·S·S·. </comment>
   <comment> Expansion for S·S·S·S·. </comment>
   <comment> S·S·S·S·: 'a'; '(', S·S·S·S·S·, ')'. </comment>
   <rule name="S·S·S·S·_0">
      <alt rtn:ruletype="terminal">
         <literal sstring="a"/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal sstring="("/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·_2"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·_1" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·_2" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call" name="S·S·S·S·S·_0" rtn:stack="push S·S·S·S·_3"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·_3" rtn:nttype="state">
      <alt rtn:ruletype="terminal">
         <literal sstring=")"/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·_4"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·_4" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·_f">
      <alt rtn:ruletype="return">
         <comment>nil</comment>
         <nonterminal name="S·S·S·_3" rtn:stack="pop S·S·S·_3"/>
      </alt>
   </rule>
   <comment> End of expansion for S·S·S·S·. </comment>
   <comment> Expansion for S·S·S·S·S·. </comment>
   <comment> S·S·S·S·S·: 'a'; '(', S·S·S·S·S·S·, ')'. </comment>
   <rule name="S·S·S·S·S·_0">
      <alt rtn:ruletype="terminal">
         <literal sstring="a"/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·S·_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <literal sstring="("/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·S·_2"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·_1" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·_2" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call"
                      name="S·S·S·S·S·S·_0"
                      rtn:stack="push S·S·S·S·S·_3"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·_3" rtn:nttype="state">
      <alt rtn:ruletype="terminal">
         <literal sstring=")"/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·S·_4"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·_4" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·_f">
      <alt rtn:ruletype="return">
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·_3" rtn:stack="pop S·S·S·S·_3"/>
      </alt>
   </rule>
   <comment> End of expansion for S·S·S·S·S·. </comment>
   <comment> Expansion for S·S·S·S·S·S·. </comment>
   <comment> S·S·S·S·S·S·: 'a'. </comment>
   <rule name="S·S·S·S·S·S·_0">
      <alt rtn:ruletype="terminal">
         <literal sstring="a"/>
         <nonterminal rtn:nttype="state" name="S·S·S·S·S·S·_1"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·S·_1" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·S·S·_f"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·S·_f">
      <alt rtn:ruletype="return">
         <comment>nil</comment>
         <nonterminal name="S·S·S·S·S·_3" rtn:stack="pop S·S·S·S·S·_3"/>
      </alt>
   </rule>
   <comment> End of expansion for S·S·S·S·S·S·. </comment>
</ixml>
