<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<ixml xmlns:gt="http://blackmesatech.com/2020/grammartools"
      gt:date="2021-01-12T20:25:32.711838-07:00">
   <comment>2021-01-12T20:25:32.711838-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.u5.raw.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment>2021-01-12T20:25:32.711838-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.u5.raw.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment>2021-01-12T20:25:25.092556-07:00: ixml-to-rk-subset.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.ixml.xml</comment>
   <comment>    This grammar accepts the r_5 subset </comment>
   <comment>    of the language accepted by the input grammar.</comment>
   <comment> First, nonrecursive production rules </comment>
   <comment>2021-01-12T20:25:25.092556-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/ab/a.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment> A really simple context-free grammar for testing
  test-generation tools.

  Revisions:
  2020-12-30 : CMSMcQ : made file
</comment>
   <comment> Second, recursive production rules </comment>
   <rule name="S" gt:recursive="false" gt:referenced="false">
      <alt>
         <literal sstring="a"/>
      </alt>
      <alt>
         <literal sstring="("/>
         <nonterminal name="S·S·"/>
         <literal sstring=")"/>
      </alt>
   </rule>
   <rule name="S·S·" gt:recursive="false">
      <alt>
         <literal sstring="a"/>
      </alt>
      <alt>
         <literal sstring="("/>
         <nonterminal name="S·S·S·"/>
         <literal sstring=")"/>
      </alt>
   </rule>
   <rule name="S·S·S·" gt:recursive="false">
      <alt>
         <literal sstring="a"/>
      </alt>
      <alt>
         <literal sstring="("/>
         <nonterminal name="S·S·S·S·"/>
         <literal sstring=")"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·" gt:recursive="false">
      <alt>
         <literal sstring="a"/>
      </alt>
      <alt>
         <literal sstring="("/>
         <nonterminal name="S·S·S·S·S·"/>
         <literal sstring=")"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·" gt:recursive="false">
      <alt>
         <literal sstring="a"/>
      </alt>
      <alt>
         <literal sstring="("/>
         <nonterminal name="S·S·S·S·S·S·"/>
         <literal sstring=")"/>
      </alt>
   </rule>
   <rule name="S·S·S·S·S·S·" gt:recursive="false">
      <alt>
         <literal sstring="a"/>
      </alt>
   </rule>
   <comment> bye </comment>
</ixml>
