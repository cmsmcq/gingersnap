<?xml version="1.0" encoding="UTF-8"?>
<?xml-stylesheet type="text/xsl" href="../src/ixml-html.xsl"?>
<ixml xmlns:gt="http://blackmesatech.com/2020/grammartools"
      xmlns:gl="http://blackmesatech.com/2019/iXML/Gluschkov"
      xmlns:follow="http://blackmesatech.com/2016/nss/ixml-gluschkov-automata-followset"
      xmlns:rtn="http://blackmesatech.com/2020/iXML/recursive-transition-networks"
      gt:date="2021-01-17T12:42:05.497712-07:00"
      gl:gluschkov="dummy value"
      follow:followsets="dummy value"
      rtn:rtn="Recursive transition network">
   <comment> 2021-01-17T12:42:05.497712-07:00 creation of stack-augmented pseudo-regular grammar (SAPRG) by ixml-to-saprg.xsl. </comment>
   <comment> Input grammar G: file:/Users/cmsmcq/2021/gingersnap/src/grammar-pipeline-handler.xsl </comment>
   <comment> Output grammar G′:  this grammar.</comment>
   <comment> A stack automaton guided by grammar G′and the rtn:stack attributes should recognize L(G), the same language recognized by G.  If the rtn:stack attributes are ignored, this is a (pseudo-)regular grammar which recognizes the R_0 superset of L(G). </comment>
   <comment>2021-01-17T12:42:05.497712-07:00: ixml-annotate-gluschkov.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/toys/g012.ixml.xml</comment>
   <comment>    Grammar augmented with Gluschkov automata (@gl:*).</comment>
   <comment>2021-01-17T12:42:05.497712-07:00: ixml-annotate-pc.xsl.</comment>
   <comment>    Input: file:/Users/cmsmcq/2021/gingersnap/toys/g012.ixml.xml</comment>
   <comment>    Grammar augmented with @gt:recursive etc.</comment>
   <comment> g012:  a small ixml grammar:  012

  One of a series (initially for test case construction).

  This one is an FSA with 0 nonfinal states, 1 final state, 2 arcs.
  (I'm not counting the nil arc marking S as final.)

  L is the set containing any string of XML characters other than 
  blank or the C0 characters (tab, CR, LF).

</comment>
   <comment> Revisions:
  2021-01-17 : CMSMcQ : made ixml 
</comment>
   <comment> Expansion for S. </comment>
   <comment> S: ; (["#21"-"#D7FF"; "#E000"-"#FFFD"]; ["#10000"-"#10FFFF"]), S. </comment>
   <rule name="S_0">
      <alt rtn:ruletype="terminal">
         <inclusion>
            <range from="#21" to="#D7FF"/>
            <range from="#E000" to="#FFFD"/>
         </inclusion>
         <nonterminal rtn:nttype="state" name="S_1"/>
      </alt>
      <alt rtn:ruletype="terminal">
         <inclusion>
            <range from="#10000" to="#10FFFF"/>
         </inclusion>
         <nonterminal rtn:nttype="state" name="S_2"/>
      </alt>
      <alt>
         <comment>rule is nullable</comment>
         <comment>nil</comment>
         <nonterminal name="S_f"/>
      </alt>
   </rule>
   <rule name="S_1" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call" name="S_0" rtn:stack="push S_3"/>
      </alt>
   </rule>
   <rule name="S_2" rtn:nttype="state">
      <alt rtn:ruletype="recursion">
         <comment>nil</comment>
         <nonterminal rtn:nttype="call" name="S_0" rtn:stack="push S_3"/>
      </alt>
   </rule>
   <rule name="S_3" rtn:nttype="state">
      <alt>
         <comment>nil</comment>
         <nonterminal name="S_f"/>
      </alt>
   </rule>
   <rule name="S_f">
      <alt rtn:ruletype="return">
         <comment>nil</comment>
         <nonterminal name="S_3" rtn:stack="pop S_3"/>
      </alt>
      <alt rtn:RHStype="grammar-final" rtn:stack="if-stack-empty">
         <comment>nil</comment>
      </alt>
   </rule>
   <comment> End of expansion for S. </comment>
</ixml>
