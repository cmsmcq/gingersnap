<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:gt="http://blackmesatech.com/2020/grammartools"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		version="3.0">

  <!--* Read report on nonterminals in a grammar, produce dot file
      * showing parent/child relation.  Color recursive nonterminals
      * light blue.
      *-->

  <!--* 2020-11-28 : CMSMcQ : made stylesheet *-->

  <!--****************************************************************
      * Setup
      ****************************************************************
      *-->

  <xsl:output method="text"
	      indent="yes"/>

  <!--****************************************************************
      * Main / starting template
      ****************************************************************
      *-->
  <xsl:template match="nonterminals-report">
    <xsl:text>digraph pc {&#xA;</xsl:text>
    
    <xsl:text>  /* Circles-and-arrows diagram of parent-child relation. &#xA;</xsl:text>
    <xsl:text>     Generated by nonterminals-list-to-dot.xsl.&#xA;</xsl:text>
    <xsl:text>     Input:</xsl:text>
    <xsl:value-of select="base-uri()"/>
    <xsl:text>&#xA;</xsl:text>
    <xsl:text>     Generated:</xsl:text>
    <xsl:value-of select="current-dateTime()"/>
    <xsl:text> */&#xA;&#xA;</xsl:text>
    
    <xsl:apply-templates select="undeclared, unreferenced"/>

    <xsl:call-template name="list-recursive-symbols"/>
    <xsl:call-template name="list-nonrecursive-symbols"/>


    <xsl:text>  /* Parent-child relation. */&#xA;</xsl:text>    
    <xsl:apply-templates select="nonterminal"/>
    <xsl:text>}&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template name="list-recursive-symbols">
    <xsl:text>  node [shape=oval, peripheries=2, style=filled, fillcolor="#EEEEFF"];&#xA;</xsl:text>
    <xsl:for-each select="nonterminal[@recursive = 'true']">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(string(@name)),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template name="list-nonrecursive-symbols">
    <xsl:text>  /* Non-recursive symbols. */&#xA;</xsl:text>    
    <xsl:text>  node [shape=oval, peripheries=1, style=solid];&#xA;</xsl:text>
    <xsl:for-each select="nonterminal
			  [not(@recursive='true')]">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(string(@name)),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template match="p"/>

  <!--* undeclared:  normally an error. *-->  
  <xsl:template match="undeclared">
    <xsl:text>  /* Undeclared nonterminals (errors). */&#xA;</xsl:text>
    <xsl:text>  node [shape=plain, fontcolor=gray];&#xA;</xsl:text>
    <xsl:for-each select="nonterminal">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(string(@name)),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <!--* unreferenced:  normally the start symbol. *-->
  <xsl:template match="unreferenced">
    <xsl:text>  /* Unreferenced nonterminals (roots). */&#xA;</xsl:text>
    <xsl:text>  node [shape=house, fontcolor=black];&#xA;</xsl:text>
    <xsl:for-each select="nonterminal">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(string(@name)),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template match="nonterminal">
    <xsl:apply-templates select="child"/>
  </xsl:template>
  
  <xsl:template match="child">
    <xsl:value-of select="concat(
			  '    ',
			  gt:nodename(../@name/string()),
			  ' -> ',
			  gt:nodename(@name/string()),
			  ';&#xA;'
			  )"/>
  </xsl:template>

  <xsl:function name="gt:nodename"
		as="xs:string">
    <xsl:param name="n" as="xs:string"/>
    <xsl:choose>
      <xsl:when test="gt:trickyname($n)">
	<xsl:value-of select="translate($n,'-','_')"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$n"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>
  
  <xsl:function name="gt:nodedecl"
		as="xs:string">
    <xsl:param name="n" as="xs:string"/>
    <xsl:choose>
      <xsl:when test="gt:trickyname($n)">
	<xsl:value-of select="concat(
			      gt:nodename($n),
			      ' [label=&quot;',
			      $n,
			      '&quot;]'
			      )"/>
      </xsl:when>
      <xsl:otherwise>
	<xsl:value-of select="$n"/>
      </xsl:otherwise>
    </xsl:choose>
  </xsl:function>
  
  <xsl:function name="gt:trickyname"
		as="xs:boolean">
    <xsl:param name="n" as="xs:string"/>
    <xsl:value-of select="contains($n,'-')"/>
  </xsl:function>
</xsl:stylesheet>
