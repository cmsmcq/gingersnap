<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:gt="http://blackmesatech.com/2020/grammartools"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		version="3.0">

  <!--* Read ixml grammar, produce parent-child graph in dot notation.
      * If ixml grammar has been augmented with gt:recursive attributes,
      * trust it unless told not to.  Otherwise, calculate what is
      * needed.
      *-->

  <!--* 2020-11-28 : CMSMcQ : made stylesheet *-->

  <!--****************************************************************
      * Setup
      ****************************************************************
      *-->

  <xsl:import href="ixml-grammar-tools.xsl"/>
  <xsl:import href="dot-tools.xsl"/>

  <xsl:output method="text"
	      indent="yes"/>

  <xsl:variable name="G"
		as="element(ixml)"
		select="/*"/>
  
  <xsl:variable name="lnDef"
		as="xs:string*"
		select="distinct-values(
			/descendant::rule/@name/string()
			)"/>
  <xsl:variable name="lnRef"
		as="xs:string*"
		select="distinct-values(
			/descendant::rule/descendant::nonterminal/@name/string()
			)"/>
  <xsl:variable name="lnUndef"
		as="xs:string*"
		select="$lnRef[not(. = $lnDef)]"/>
  <xsl:variable name="lnUnref"
		as="xs:string*"
		select="$lnDef[not(. = $lnRef)]"/>  

  <!--****************************************************************
      * Main / starting template
      ****************************************************************
      *-->
  <xsl:template match="ixml">
    <xsl:text>digraph pc {&#xA;</xsl:text>
    
    <xsl:text>  /* Circles-and-arrows diagram of parent-child relation. &#xA;</xsl:text>
    <xsl:text>     Generated by ixml-to-pcdot.xsl.&#xA;</xsl:text>
    <xsl:text>     Input:</xsl:text>
    <xsl:value-of select="base-uri()"/>
    <xsl:text>&#xA;</xsl:text>
    <xsl:text>     Generated:</xsl:text>
    <xsl:value-of select="current-dateTime()"/>
    <xsl:text> */&#xA;&#xA;</xsl:text>

    <xsl:call-template name="list-undeclared-symbols"/>
    <xsl:call-template name="list-unreferenced-symbols"/>
    <xsl:call-template name="list-recursive-symbols"/>
    <xsl:call-template name="list-nonrecursive-symbols"/>

    <xsl:text>  /* Parent-child relation. */&#xA;</xsl:text>    
    <xsl:apply-templates select="rule"/>
    <xsl:text>}&#xA;</xsl:text>
  </xsl:template>

  <!--****************************************************************
      * Named templates for node declarations
      * we 'declare' nodes in advance to get the styling right.
      ****************************************************************
      *-->  
  <!--* undeclared:  normally an error. *-->  
  <xsl:template name="list-undeclared-symbols">
    <xsl:text>  /* Undeclared nonterminals (errors). */&#xA;</xsl:text>
    <xsl:text>  node [shape=plain, fontcolor=gray];&#xA;</xsl:text>
    <xsl:for-each select="$lnUndef">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(.),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <!--* unreferenced:  normally the start symbol. *-->
  <xsl:template name="list-unreferenced-symbols">
    <xsl:text>  /* Unreferenced nonterminals (roots). */&#xA;</xsl:text>
    <xsl:text>  node [shape=house, fontcolor=black];&#xA;</xsl:text>
    <xsl:for-each select="$lnUnref">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(.),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template name="list-recursive-symbols">
    <xsl:variable name="leRec"
		  as="element(rule)*"
		  select="if (/descendant::rule/@gt:recursive)
			  then /descendant::rule[@recursive='true']
			  else
			  for $r in /descendant::rule
			  return let $n := $r/@name/string()
			  return let $ln := gt:lnDescXGN($G, $n)
			  return if ($n = $ln) then $r else ()
			  "/>
    <xsl:text>  node [shape=oval, peripheries=2, style=filled, fillcolor="#EEEEFF"];&#xA;</xsl:text>    
    <xsl:for-each select="$leRec">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(@name/string(), @mark/string()),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>
  
  <xsl:template name="list-nonrecursive-symbols">
    <xsl:variable name="leNonrec"
		  as="element(rule)*"
		  select="if (/descendant::rule/@gt:recursive)
			  then /descendant::rule[@recursive='true']
			  else
			  for $r in /descendant::rule
			  return let $n := $r/@name/string()
			  return let $ln := gt:lnDescXGN($G, $n)
			  return if ($n = $ln) then () else $r
			  "/>
    <xsl:text>  /* Non-recursive symbols. */&#xA;</xsl:text>    
    <xsl:text>  node [shape=oval, peripheries=1, style=solid];&#xA;</xsl:text>
    <xsl:for-each select="descendant::rule
			  [not(@recursive='true')]">
      <xsl:value-of select="concat('    ',
	gt:nodedecl(@name/string(), @mark/string()),
	';')"/>
      <xsl:text>&#xA;</xsl:text>
    </xsl:for-each>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <!--****************************************************************
      * Match templates for rules and nonterminals on RHS
      ****************************************************************
      *-->  
  
  <xsl:template match="comment"/>
  
  <xsl:template match="rule">
    <xsl:variable name="parent" select="string(@name)"/>
    <xsl:for-each select="distinct-values(descendant::nonterminal/@name/string())">
      <xsl:value-of select="concat(
			    '    ',
			    gt:nodename($parent),
			    ' -> ',
			    gt:nodename(.),
			    ';&#xA;'
			    )"/>
    </xsl:for-each>
  </xsl:template>
  
  <xsl:template match="rule" mode="v1">
    <xsl:apply-templates select="descendant::nonterminal">
      <xsl:with-param name="parent" select="string(@name)"/>
    </xsl:apply-templates>
  </xsl:template>
  
  <xsl:template match="nonterminal" mode="v1">
    <xsl:param name="parent" as="xs:string" required="yes"/>
    <xsl:value-of select="concat(
			  '    ',
			  gt:nodename($parent),
			  ' -> ',
			  gt:nodename(@name/string()),
			  ';&#xA;'
			  )"/>
  </xsl:template>

  <!--****************************************************************
      * Functions
      ****************************************************************
      *-->

  <!--* all the functions have moved to dot-tools and
      * ixml-grammar-tools. *-->
  
</xsl:stylesheet>
