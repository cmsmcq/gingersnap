<xsl:stylesheet xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
		xmlns:gt="http://blackmesatech.com/2020/grammartools"
		xmlns:xs="http://www.w3.org/2001/XMLSchema"
		version="3.0">

  <!--* Read a right-regular grammar in ixml, produce dot file 
      * depicting the FSA. 
      *-->

  <!--* Revisions:
      * 2021-01-16 : CMSMcQ : made stylesheet, cutting some corners
      *-->

  <!--****************************************************************
      * Setup
      ****************************************************************
      *-->
  <xsl:include href="dot-tools.xsl"/>

  <xsl:output method="text"
	      indent="yes"/>

  <xsl:strip-space elements="*"/>

  <!--****************************************************************
      * Main / starting template
      ****************************************************************
      *-->
  <xsl:template match="ixml">
    <xsl:text>digraph rgfsa {&#xA;</xsl:text>
    
    <xsl:text>  /* Circles-and-arrows diagram of FSA from right-regular grammar. &#xA;</xsl:text>
    <xsl:text>     Generated by rg-to-dot.xsl.&#xA;</xsl:text>
    <xsl:text>     Input:</xsl:text>
    <xsl:value-of select="base-uri()"/>
    <xsl:text>&#xA;</xsl:text>
    <xsl:text>     Generated:</xsl:text>
    <xsl:value-of select="current-dateTime()"/>
    <xsl:text> */&#xA;&#xA;</xsl:text>

    <!--* Declare the nodes *-->
    <xsl:apply-templates select="rule"/>
    
    <!--* Write the arcs *-->
    <xsl:apply-templates select="rule/alt"/>

    <xsl:text>}&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="rule">
    <xsl:variable name="final" as="xs:boolean"
		  select="exists(alt[empty(* except comment)])"/>
    <xsl:value-of select="gt:nodedecl(string(@name), string(@mark), $final)"/>
    <xsl:text>&#xA;</xsl:text>
  </xsl:template>

  <xsl:template match="rule/alt">
    <!--* leCh: list of child elements *-->
    <xsl:variable name="leChildren" as="element()*"
		  select="* except comment"/>

    <xsl:variable name="sFrom" as="xs:string"
		  select="gt:nodename(string(../@name))"/>
    <xsl:variable name="sTo" as="xs:string?"
		  select="if (exists(nonterminal))
			  then gt:nodename(nonterminal/@name/string())
			  else ()"/>

    <xsl:choose>
      <xsl:when test="empty($leChildren)">
	<xsl:value-of select="$sFrom"/>
	<xsl:text> -> </xsl:text>
	<xsl:value-of select="$sFrom"/>
	<xsl:text> [label="&#x3B5;"];&#xA;</xsl:text>
      </xsl:when>
      <xsl:when test="count($leChildren) eq 1 and exists(nonterminal)">
	<xsl:value-of select="$sFrom"/>
	<xsl:text> -> </xsl:text>
	<xsl:value-of select="$sTo"/>
	<xsl:text> [label="&#x3B5;"];&#xA;</xsl:text>
      </xsl:when>
      <xsl:when test="count($leChildren) eq 2 and count(nonterminal) eq 1">
	<xsl:value-of select="$sFrom"/>
	<xsl:text> -> </xsl:text>
	<xsl:value-of select="$sTo"/>
	<xsl:text> [label="</xsl:text>
	<xsl:apply-templates select="* except (nonterminal, comment)"/>	
	<xsl:text>"];&#xA;</xsl:text>
      </xsl:when>
      <xsl:otherwise>
	<xsl:message terminate="yes">
	  <xsl:text>Unprepared for this arc: &#xA;</xsl:text>
	  <xsl:sequence select="."/>
	</xsl:message>
      </xsl:otherwise>      
    </xsl:choose>
		  
  </xsl:template>

  <xsl:template match="literal">
    <xsl:sequence select="(@dstring/string(),
			  @sstring/string(),
			  concat('#', @hex/string()))[1]"/>
    <xsl:if test="(parent::inclusion or parent::exclusion)
		  and following-sibling::*[not(self::comment)]">
      <xsl:text>; </xsl:text>
    </xsl:if>
    
  </xsl:template>

  <xsl:template match="inclusion|exclusion">
    <xsl:if test="self::exclusion">
      <xsl:text>~</xsl:text>
    </xsl:if>
    <xsl:text>[</xsl:text>
    <xsl:apply-templates/>
    <xsl:text>]</xsl:text>
  </xsl:template>

  <xsl:template match="range">
    <xsl:value-of select="concat(
			  &quot;&apos;&quot;, @from,
			  &quot;&apos; - &apos;&quot;,
			  @to, &quot;&apos;&quot;)"/>
    <xsl:if test="following-sibling::*[not(self::comment)]">
      <xsl:text>; </xsl:text>
    </xsl:if>
  </xsl:template>

  <xsl:template match="class">
    <xsl:value-of select="@code"/>
    <xsl:if test="following-sibling::*[not(self::comment)]">
      <xsl:text>; </xsl:text>
    </xsl:if>
  </xsl:template>
  
</xsl:stylesheet>
